// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package main

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonEada991cDecodeGithubComDiscHighloadcup(in *jlexer.Lexer, out *Visit) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = uint(in.Uint())
		case "location":
			out.Location = uint(in.Uint())
		case "user":
			out.User = uint(in.Uint())
		case "visited_at":
			out.Visited_at = int(in.Int())
		case "mark":
			out.Mark = uint(in.Uint())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEada991cEncodeGithubComDiscHighloadcup(out *jwriter.Writer, in Visit) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"id\":")
	out.Uint(uint(in.Id))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"location\":")
	out.Uint(uint(in.Location))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"user\":")
	out.Uint(uint(in.User))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"visited_at\":")
	out.Int(int(in.Visited_at))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"mark\":")
	out.Uint(uint(in.Mark))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Visit) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEada991cEncodeGithubComDiscHighloadcup(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Visit) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEada991cEncodeGithubComDiscHighloadcup(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Visit) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonEada991cDecodeGithubComDiscHighloadcup(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Visit) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEada991cDecodeGithubComDiscHighloadcup(l, v)
}
